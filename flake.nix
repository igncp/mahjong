{
  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };
  outputs = {
    nixpkgs,
    flake-utils,
    ...
  }:
    flake-utils.lib.eachDefaultSystem (system: let
      pkgs = import nixpkgs {
        inherit system;
        config = {
          allowUnfree = true;
          android_sdk.accept_license = true;
        };
      };
      service_manifest = (pkgs.lib.importTOML ./service/Cargo.toml).package;

      # Keep in sync with mobile_apps/android/build.gradle
      buildToolsVersion = "33.0.0";

      androidComposition = pkgs.androidenv.composeAndroidPackages {
        buildToolsVersions = [buildToolsVersion "30.0.3"];
        includeEmulator = true;
        includeNDK = false;
        includeSources = false;
        includeSystemImages = false;
        platformToolsVersion = "33.0.3";
        platformVersions = ["28" "29" "30" "33"];
        systemImageTypes = ["google_apis_playstore"];
        toolsVersion = "26.1.1";
        useGoogleAPIs = false;
        useGoogleTVAddOns = false;

        includeExtras = [
          "extras;google;gcm"
        ];
      };
    in rec {
      devShell = pkgs.mkShell rec {
        packages = with pkgs; [libiconv glibc androidComposition.androidsdk jdk androidComposition.platform-tools android-studio sqlite];
        ANDROID_SDK_ROOT = "${androidComposition.androidsdk}/libexec/android-sdk";
        ANDROID_HOME = "${ANDROID_SDK_ROOT}";
        GRADLE_OPTS = "-Dorg.gradle.project.android.aapt2FromMavenOverride=${ANDROID_SDK_ROOT}/build-tools/${buildToolsVersion}/aapt2";
        JAVA_HOME = pkgs.jdk.home;
        shellHook = ''
          cat <<EOF > mobile_apps/android/local.properties
          # This file was automatically generated by nix-shell.
          sdk.dir=$ANDROID_SDK_ROOT
          EOF
        '';
      };
      packages.mahjong_service = pkgs.rustPlatform.buildRustPackage {
        pname = service_manifest.name;
        version = service_manifest.version;

        src = ./.;
        cargoLock = {lockFile = ./Cargo.lock;};

        buildInputs = [
          pkgs.openssl
          pkgs.sqlite
        ];
        nativeBuildInputs = [pkgs.pkgconfig];
      };

      defaultPackage = packages.mahjong_service;
    });
}
