{
  pkgs,
  system,
  is-docker-ci,
}: let
  # Keep in sync with mobile_apps/android/build.gradle
  buildToolsVersion = "33.0.0";

  has_skip_android = builtins.pathExists ./without-android;
  with_android = is-docker-ci == false && has_skip_android == false && system != "aarch64-linux" && system != "aarch64-darwin";

  androidComposition = pkgs.androidenv.composeAndroidPackages {
    buildToolsVersions = [buildToolsVersion "30.0.3"];
    includeEmulator = true;
    includeNDK = false;
    includeSources = false;
    includeSystemImages = false;
    platformToolsVersion = "33.0.3";
    platformVersions = ["28" "29" "30" "33"];
    systemImageTypes = ["google_apis_playstore"];
    toolsVersion = "26.1.1";
    useGoogleAPIs = false;
    useGoogleTVAddOns = false;

    includeExtras = [
      "extras;google;gcm"
    ];
  };
in {
  extra-shell =
    if with_android
    then rec {
      ANDROID_SDK_ROOT = "${androidComposition.androidsdk}/libexec/android-sdk";
      ANDROID_HOME = "${ANDROID_SDK_ROOT}";
      GRADLE_OPTS = "-Dorg.gradle.project.android.aapt2FromMavenOverride=${ANDROID_SDK_ROOT}/build-tools/${buildToolsVersion}/aapt2";
      JAVA_HOME = pkgs.jdk.home;
      shellHook = ''
        cat <<EOF > mobile_apps/android/local.properties
        # This file was automatically generated by nix-shell.
        sdk.dir=$ANDROID_SDK_ROOT
        EOF
      '';
    }
    else {};
  extra-shell-packages = (
    if with_android
    then with pkgs; [libiconv glibc androidComposition.androidsdk jdk androidComposition.platform-tools android-studio]
    else []
  );
}
